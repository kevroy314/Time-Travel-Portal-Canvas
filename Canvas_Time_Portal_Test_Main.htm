<html>
<head>
<title>Time Portal Test</title>
<script src="PlayerCharacter.js"></script>
<script type="text/javascript">

window.onload = Initialize;
window.onkeydown = KeyDownEvent;
window.onkeyup = KeyUpEvent;

var eventStack = new Array();

EventTypeEnum = {LeftMove:0,RightMove:1,UpMove:2,DownMove:3,InPortal:4,OutPortal:5};

var canvas;

var keyStates = {};

var gLoop;

var drawIteration = 0;
var updateIteration = 0;
var textX = 50, textY = 50;

var pc = new PlayerCharacter(100,100,"testSprite.png","testPortalIn.png","testPortalOut.png");

function KeyDownEvent(e){
	keyStates[e.keyCode] = 1;
	return false;
}

function KeyUpEvent(e){
	keyStates[e.keyCode] = 0;
	return false;
}

function HandleKeyEvents(){
	if(keyStates[37]){ //Left
		var newX = pc.X-pc.XVel;
		if(!(newX<0)){
			eventStack.push(EventTypeEnum.LeftMove);
			eventStack.push(updateIteration);
			pc.move(-pc.XVel,0);
		}
	}
	if(keyStates[38]){ //Up
		var newY = pc.Y-pc.YVel;
		if(!(newY<0)){
			eventStack.push(EventTypeEnum.UpMove);
			eventStack.push(updateIteration);
			pc.move(0,-pc.YVel);
		}
	}
	if(keyStates[39]){ //Right
		var newX = pc.X+pc.XVel;
		if(!(newX+pc.image.width>canvas.width)){
			eventStack.push(EventTypeEnum.RightMove);
			eventStack.push(updateIteration);
			pc.move(pc.XVel,0);
		}
	}
	if(keyStates[40]){ //Down
		var newY = pc.Y+pc.YVel;
		if(!(newY+pc.image.height>canvas.height)){
			eventStack.push(EventTypeEnum.DownMove);
			eventStack.push(updateIteration);
			pc.move(0,pc.YVel);
		}
	}
	if(keyStates[49]){ //1
		eventStack.push(EventTypeEnum.InPortal);
		eventStack.push(updateIteration);
		pc.createInPortal(updateIteration);
	}
	if(keyStates[50]){ //2
		eventStack.push(EventTypeEnum.OutPortal);
		eventStack.push(updateIteration);
		pc.createOutPortal();
	}
	if(keyStates[51]){ //3
		var startTime = eventStack.pop();
		while(eventStack.length>0){
			var event = eventStack.pop();
			setTimeout(HandleStackElement(startTime,event),1000);
			if(eventStack.length!=0)
				nextTime = eventStack.pop();
			else
				nextTime = 0;
			var timeDiff = startTime-nextTime;
			for(var j = 0; j < timeDiff; j++)
				setTimeout(HandleStackElement(null,-1),1000);
			startTime = nextTime;
		}
	}
}

function HandleStackElement(time,event){
	if(event!=-1){
		switch(event){
			case EventTypeEnum.LeftMove:
				pc.move(pc.XVel,0);
			break;
			case EventTypeEnum.UpMove:
				pc.move(0,pc.YVel);
			break;
			case EventTypeEnum.RightMove:
				pc.move(-pc.XVel,0);
			break;
			case EventTypeEnum.DownMove:
				pc.move(0,-pc.YVel);
			break;
			/*case EventTypeEnum.InPortal:
				pc.createInPortal(updateIteration);
			break;
			case EventTypeEnum.OutPortal:
				pc.createOutPortal();
			break;*/
		}
		draw();
	}
}

function draw(){
	if(canvas.getContext){
		var ctx = canvas.getContext('2d');
		ctx.fillStyle = "#FFFFFF";
		ctx.fillRect(0,0,canvas.width,canvas.height);
		ctx.fillStyle = "#000000";
		ctx.fillText("D: "+drawIteration+", U: "+updateIteration,textX,textY);
		pc.draw(ctx);
		drawIteration++;
	}
}

function update(){
	HandleKeyEvents();
	updateIteration++;
}

function GameLoop(){
	draw();
	update();
	gLoop = setTimeout(GameLoop, 1000/50);
}

function Initialize(){
	canvas = document.getElementById("mainCanvas");
	GameLoop();
}
</script>
</head>
<body bgcolor="#000000">
<canvas id="mainCanvas" width=500 height=500>
Your browser doesn't support the HTML5 canvas element!
</canvas>
</body>
</html>